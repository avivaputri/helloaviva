{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js","logo.svg","assets/img/bg.jpg"],"names":["Home","props","toggleCollapse","setState","isOpen","state","time","date","Date","jam","getHours","menit","getMinutes","t_str","getSeconds","countdown","t","getTime","days","Math","floor","hours","minutes","seconds","count","curHr","tgl","weekday","Array","final","getDay","getDate","getMonth","getFullYear","data","author","text","this","getData","setInterval","timerID","tglID","axios","get","then","res","random","length","color","fixed","dark","expand","scrolling","transparent","className","onClick","id","navbar","right","href","size","icon","fluid","React","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.817affdb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\nimport { AppBar } from '@material-ui/core';\r\nimport Bg from './assets/img/bg.jpg';\r\nimport { MDBFooter, MDBInput, MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBDropdown,\r\n    MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon, MDBContainer, MDBTypography } from \"mdbreact\";\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n              author:'',\r\n              text: ''\r\n            },\r\n            time: '',\r\n            tgl: '',\r\n            curHr: '',\r\n            count: '',\r\n            isOpen: false\r\n        };\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getData();        \r\n        this.count = setInterval(\r\n            () => this.countdown(),\r\n            1000);\r\n        this.timerID = setInterval(\r\n            () => this.time(),\r\n             1000);\r\n        this.tglID = setInterval(\r\n            () => this.tgl(),\r\n            1000);\r\n        this.tglID = setInterval(\r\n            () => this.curHr(),\r\n            1000);\r\n    }\r\n\r\n\r\n\r\n    toggleCollapse = () => {\r\n        this.setState({ isOpen: !this.state.isOpen });\r\n      }\r\n\r\n    time = () =>{\r\n        var date = new Date();\r\n        var jam = date.getHours();\r\n        var menit = date.getMinutes();\r\n        var detik = date.getSeconds();\r\n\r\n        if (menit < 10){\r\n            menit = \"0\" + menit\r\n        }\r\n        var t_str = jam + \":\" + menit + \":\" + detik + \" \";\r\n        if(jam > 11){\r\n            t_str += \"PM\";\r\n        } else {\r\n            t_str += \"AM\";\r\n        }\r\n        this.setState({ time: t_str })\r\n    };\r\n\r\n    countdown = () =>{\r\n      var countDownDate = new Date(\"Jul 24, 2020 00:00:00\").getTime();\r\n\r\n      var now = new Date().getTime();\r\n      var t = countDownDate - now;\r\n      var days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n      var hours = Math.floor((t%(1000 * 60 * 60 * 24))/(1000 * 60 * 60));\r\n      var minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\r\n      var seconds = Math.floor((t % (1000 * 60)) / 1000);\r\n\r\n      this.setState({ count: days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \"})     \r\n    }\r\n\r\n    curHr = () =>{\r\n      var array = ['./assets']\r\n      var date = new Date()\r\n      var curHr = date.getHours()\r\n\r\n      if (curHr < 12) {\r\n        this.setState({ curHr: \"Good Morning\"})\r\n      } else if (curHr < 18) {\r\n        this.setState({ curHr: \"Good Afternoon\"})\r\n      } else {\r\n        this.setState({ curHr: \"Good Evening\"})\r\n      }\r\n    }\r\n\r\n    getData(){\r\n      axios.get('https://type.fit/api/quotes').then(res=>{\r\n          var random = res.data[Math.floor(Math.random() * res.data.length)];\r\n          this.setState({\r\n            data:{ author: random.author, text:random.text}\r\n          });\r\n      });\r\n  }\r\n\r\n    tgl = () =>{\r\n      var date = new Date();\r\n      var weekday = new Array(7);\r\n          weekday[0] = \"Sunday\";\r\n          weekday[1] = \"Monday\";\r\n          weekday[2] = \"Tuesday\";\r\n          weekday[3] = \"Wednesday\";\r\n          weekday[4] = \"Thursday\";\r\n          weekday[5] = \"Friday\";\r\n          weekday[6] = \"Saturday\";\r\n      var hari = weekday[date.getDay()];\r\n      var tgl = date.getDate();\r\n      var bulan = date.getMonth()+1;\r\n      var tahun = date.getFullYear();\r\n      var final = hari +\", \"+ tgl + \"/\" + bulan + \"/\" + tahun;\r\n\r\n      this.setState({ tgl: final })\r\n    };\r\n\r\n    render(){\r\n        \r\n        return(\r\n          <>\r\n            <div>\r\n                <MDBNavbar color=\"elegant-color-dark\" fixed=\"top\" dark expand=\"md\" scrolling transparent>\r\n                  <MDBNavbarBrand>\r\n                    <strong className=\"white-text text-center\">Muhammad Syahril</strong>                    \r\n                  </MDBNavbarBrand>\r\n                  <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n                  <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n                    <MDBNavbarNav right>                                     \r\n                      <MDBNavItem>    \r\n                        <MDBNavbarBrand>                        \r\n                          <a id=\"socmed\" href=\"https://instagram.com/mhmd_syhrl_\"><MDBIcon size=\"2x\" icon=\"instagram\" /></a>                                                \r\n                        </MDBNavbarBrand>\r\n                      </MDBNavItem>\r\n                      <MDBNavItem>\r\n                        <MDBNavbarBrand>                        \r\n                          <a id=\"socmed\" href=\"https://api.whatsapp.com/send?phone=6281251416220\"><MDBIcon size=\"2x\" icon=\"whatsapp\" /></a>\r\n                        </MDBNavbarBrand>                    \r\n                      </MDBNavItem> \r\n                      <MDBNavItem> \r\n                        <MDBNavbarBrand id=\"socmed\">                       \r\n                          <a id=\"socmed\" href=\"https://www.facebook.com/aril.vandisorder\"><MDBIcon size=\"2x\" icon=\"facebook\" /></a>\r\n                        </MDBNavbarBrand>\r\n                      </MDBNavItem>\r\n                    </MDBNavbarNav>                  \r\n                  </MDBCollapse>\r\n                </MDBNavbar>\r\n            </div>            \r\n            <div className=\"content\">\r\n                <MDBContainer fluid>\r\n                  <MDBTypography className=\"text-center\" id=\"typography\">{this.state.time}</MDBTypography>\r\n                  <MDBTypography className=\"text-center\" id=\"typography1\">Happy Birthday, Aviva Putri Humaira</MDBTypography>\r\n                  <MDBTypography className=\"text-center\" id=\"typography2\">{this.state.tgl}</MDBTypography>                  \r\n                </MDBContainer>\r\n            </div>\r\n            <div>\r\n              <MDBFooter id=\"footer\">\r\n                <p id=\"footer-text\" className=\"text-center\"> \" {this.state.data.text} \" - {this.state.data.author} </p>                \r\n              </MDBFooter>\r\n            </div>\r\n\r\n         </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home.js';\n\nclass App extends React.Component{\n\n  render(){\n    return(\n      <Router>\n        <Switch>\n          <Route path=\"/\"><Home/></Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.53cefd5f.jpg\";"],"sourceRoot":""}